package com.seraphim.pokemon

import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.AutoAwesome
import androidx.compose.material.icons.filled.BookmarkBorder
import androidx.compose.material.icons.filled.CatchingPokemon
import androidx.compose.material.icons.filled.PersonOutline
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.NavigationBar
import androidx.compose.material3.NavigationBarItem
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.navigation.NavHostController
import androidx.navigation.compose.currentBackStackEntryAsState
import androidx.navigation.compose.rememberNavController
import com.ramcosta.composedestinations.DestinationsNavHost
import com.ramcosta.composedestinations.generated.NavGraphs
import com.ramcosta.composedestinations.generated.destinations.BookmarkScreenDestination
import com.ramcosta.composedestinations.generated.destinations.ExploreScreenDestination
import com.ramcosta.composedestinations.generated.destinations.HomeScreenDestination
import com.ramcosta.composedestinations.generated.destinations.ProfileScreenDestination
import com.ramcosta.composedestinations.spec.DirectionDestinationSpec
import com.ramcosta.composedestinations.utils.isRouteOnBackStackAsState
import com.ramcosta.composedestinations.utils.rememberDestinationsNavigator

@Composable
fun MainScreen() {
    val navController = rememberNavController()

    Scaffold(
        bottomBar = {
            val navBackStackEntry by navController.currentBackStackEntryAsState()
            val currentDestinationRoute = navBackStackEntry?.destination?.route
            if (currentDestinationRoute == HomeScreenDestination.route ||
                currentDestinationRoute == BookmarkScreenDestination.route ||
                currentDestinationRoute == ExploreScreenDestination.route ||
                currentDestinationRoute == ProfileScreenDestination.route
            ) {
                BottomNavBar(navController = navController)
            }
        }) { innerPadding ->
        DestinationsNavHost(
            navController = navController,
            navGraph = NavGraphs.root, // Automatically generated by Compose Destinations
            modifier = Modifier.padding(bottom = innerPadding.calculateBottomPadding()),
            start = NavGraphs.root.defaultStartDirection,
        )
    }
}

data class BottomNavItem(
    val destination: DirectionDestinationSpec, val icon: ImageVector, val label: String
)


@Composable
fun BottomNavBar(navController: NavHostController) {
    val navigator = navController.rememberDestinationsNavigator()

    val screens = listOf(
        BottomNavItem(HomeScreenDestination, Icons.Default.CatchingPokemon, "Home"),
        BottomNavItem(BookmarkScreenDestination, Icons.Default.BookmarkBorder, "Bookmark"),
        BottomNavItem(ExploreScreenDestination, Icons.Default.AutoAwesome, "Explore"),
        BottomNavItem(ProfileScreenDestination, Icons.Default.PersonOutline, "Mine"),
    )

//    val navBackStackEntry = navController.currentBackStackEntryAsState()
    NavigationBar(containerColor = MaterialTheme.colorScheme.surface) {
        screens.forEach { destination ->
            val isCurrentDestOnBackStack by navController.isRouteOnBackStackAsState(destination.destination)

            NavigationBarItem(selected = isCurrentDestOnBackStack, onClick = {
                if (isCurrentDestOnBackStack) {
                    // When we click again on a bottom bar item and it was already selected
                    // we want to pop the back stack until the initial destination of this bottom bar item
                    navigator.popBackStack(destination.destination, false)
                    return@NavigationBarItem
                }
                navigator.navigate(destination.destination) {
                    // Pop up to the root of the graph to
                    // avoid building up a large stack of destinations
                    // on the back stack as users select items
                    popUpTo(NavGraphs.root) {
                        saveState = true
                    }

                    // Avoid multiple copies of the same destination when
                    // reselecting the same item
                    launchSingleTop = true
                    // Restore state when reselecting a previously selected item
                    restoreState = true
                }
            }, icon = {
                Icon(
                    destination.icon, contentDescription = destination.label
                )
            }, label = {
                Text(destination.label)
            })
        }
    }

}